const config = {
    databaseUrl: 'database.json',
    popularQueries: [
        "JavaScript",
        "Python",
        "–ú–æ—Å–∫–≤–∞",
        "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
        "–†–µ—Ü–µ–ø—Ç—ã",
        "–ò–≥—Ä—ã",
        "–ù–æ–≤–æ—Å—Ç–∏",
        "–°–ø–æ—Ä—Ç",
        "–°–ª–æ–Ω —Ñ–æ—Ç–æ",
        "–ö–∞—Ä–∞—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        "–ö–∏—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏",
        "–ñ–∏—Ä–∞—Ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
        "–ñ–∏–≥—É–ª—ë–≤—Å–∫–æ–µ –ø–∏–≤–æ —Ñ–æ—Ç–æ"
    ]
};


const chatbotKnowledge = {
    "–ø—Ä–∏–≤–µ—Ç": "–ü—Ä–∏–≤–µ—Ç! –Ø –ê–ª—ë–Ω—É—à–∫–∞, –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å–∏—Å—Ç–µ–º–µ –ê–ª—ë–Ω–∫–∞_Turbo. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
    "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –ø–æ–∏—Å–∫–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã.",
    "–ø–æ–º–æ—â—å": "–Ø –º–æ–≥—É:\n1. –ü–æ–º–æ—á—å —Å –ø–æ–∏—Å–∫–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n2. –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã\n3. –ü–æ–¥—Å–∫–∞–∑–∞—Ç—å, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞\n–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
    "–∫–æ–Ω—Ç–∞–∫—Ç—ã": "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–æ–∂–Ω–æ:\nüìß Email: alyonushka-store@yandex.ru\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (923) 174-27-02",
    "–æ–ø–µ—Ä–∞—Ç–æ—Ä": "–°–µ–π—á–∞—Å —è –ø–æ–ø—Ä–æ–±—É—é —Å–æ–µ–¥–∏–Ω–∏—Ç—å –≤–∞—Å —Å –∂–∏–≤—ã–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º...\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç—ã. –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞.",
    "—Å–ø–∞—Å–∏–±–æ": "–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä –ï—Å–ª–∏ –±—É–¥—É—Ç –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã - —è –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å.",
    "–ø–æ–∫–∞": "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ.",
    "–ø–æ–∏—Å–∫": "–ß—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫:\n1. –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞\n2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–π—Ç–∏' –∏–ª–∏ Enter\n3. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n–ú–æ–∂–µ—Ç —è –º–æ–≥—É –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –¥–ª—è –≤–∞—Å?",
    "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏": "–í—ã –º–æ–∂–µ—Ç–µ:\n1. –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É (—Å–≤–µ—Ç–ª–∞—è/—Ç—ë–º–Ω–∞—è)\n2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞\n3. –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
    "–æ—à–∏–±–∫–∞": "–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n1. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º\n3. –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
    "–∞–ª—ë–Ω–∫–∞": "–ê–ª—ë–Ω–∫–∞_Turbo - —ç—Ç–æ —É–º–Ω–∞—è –ø–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º (—ç—Ç–æ —è!). –ú—ã –ø–æ–º–æ–≥–∞–µ–º –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
    "–∞–ª—ë–Ω—É—à–∫–∞": "–î–∞, —ç—Ç–æ —è! üòä –í–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å–∏—Å—Ç–µ–º–µ –ê–ª—ë–Ω–∫–∞_Turbo. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
    "–∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è": "–í–æ—Ç –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞:\n1. –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞\n2. –£—Ç–æ—á–Ω–∏—Ç–µ –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n3. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞\n–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è –ø–æ–º–æ–≥–ª–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º?"
};


const faqOptions = [
    "–ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫?",
    "–ì–¥–µ –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã?",
    "–ö–∞–∫ —Å–º–µ–Ω–∏—Ç—å —Ç–µ–º—É?",
    "–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º?",
    "–ß—Ç–æ —Ç–∞–∫–æ–µ –ê–ª—ë–Ω–∫–∞_Turbo?"
];


let database = [];
let currentTheme = 'light';
let currentQuery = '';


const domElements = {
    searchInput: document.getElementById('search-input'),
    searchButton: document.getElementById('search-button'),
    searchResults: document.getElementById('search-results'),
    searchStats: document.getElementById('search-stats'),
    themeButtons: document.querySelectorAll('.theme-btn'),
    loadingElement: document.getElementById('loading'),
    suggestionsElement: document.getElementById('suggestions'),
    searchTips: document.querySelector('.search-tips')
};


async function initApp() {
    try {
        
        await loadDatabase();
        
        
        setTheme(localStorage.getItem('searchTheme') || 'light');
        
        
        handleUrlParams();
        
        
        setupEventListeners();
        setupVoiceSearch();

        
        initChatbot();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    }
}


async function loadDatabase() {
    try {
        const response = await fetch(config.databaseUrl);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        database = await response.json();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        throw error;
    }
}


function handleUrlParams() {
    const urlParams = new URLSearchParams(window.location.search);
    const searchParam = urlParams.get('q');
    
    if (searchParam && domElements.searchInput) {
        domElements.searchInput.value = searchParam;
        performSearch(searchParam);
    }
}


function setupEventListeners() {
    
    if (domElements.searchButton) {
        domElements.searchButton.addEventListener('click', () => performSearch(domElements.searchInput.value));
    }

    if (domElements.searchInput) {
        domElements.searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                performSearch(domElements.searchInput.value);
                domElements.suggestionsElement.style.display = 'none';
            }
        });
        
        domElements.searchInput.addEventListener('input', function() {
            showSuggestions();
        });
    }

    
    if (domElements.suggestionsElement) {
        domElements.suggestionsElement.addEventListener('click', function(e) {
            if (e.target.classList.contains('suggestion-item')) {
                domElements.searchInput.value = e.target.textContent;
                domElements.suggestionsElement.style.display = 'none';
                performSearch(domElements.searchInput.value);
            }
        });
    }

    
    document.addEventListener('click', function(e) {
        if (domElements.suggestionsElement && !e.target.closest('.search-form')) {
            domElements.suggestionsElement.style.display = 'none';
        }
    });

    
    domElements.themeButtons.forEach(btn => {
        btn.addEventListener('click', () => {
            setTheme(btn.dataset.theme);
        });
    });

    
    if (domElements.searchTips) {
        domElements.searchTips.addEventListener('click', function(e) {
            if (e.target.tagName === 'SPAN') {
                domElements.searchInput.value = e.target.textContent;
                performSearch(e.target.textContent);
            }
        });
    }
}
function setupVoiceSearch() {
    const voiceButton = document.getElementById('voice-button');
    if (!voiceButton || !('webkitSpeechRecognition' in window)) return;

    const recognition = new webkitSpeechRecognition();
    recognition.lang = "ru-RU";
    recognition.interimResults = false;
    recognition.maxAlternatives = 1;

    voiceButton.addEventListener('click', () => {
        recognition.start();
        voiceButton.textContent = 'üéôÔ∏è'; 
    });

    recognition.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        domElements.searchInput.value = transcript;
        performSearch(transcript);
        voiceButton.textContent = 'üé§';
    };

    recognition.onerror = (e) => {
        console.error("–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞:", e.error);
        voiceButton.textContent = 'üé§';
    };

    recognition.onend = () => {
        voiceButton.textContent = 'üé§';
    };
}




function performSearch(query) {
    query = query.toLowerCase().trim();
    currentQuery = query;
    
    if (query === '') {
        showEmptyQueryMessage();
        return;
    }

    showLoadingIndicator();
    
    
    setTimeout(() => {
        try {
            const results = searchInDatabase(query);
            displaySearchResults(results, query);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
            showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞.');
        } finally {
            hideLoadingIndicator();
        }
    }, 800);
}


function searchInDatabase(query) {
    return database.filter(item => {
        return item.title.toLowerCase().includes(query) || 
               item.snippet.toLowerCase().includes(query) ||
               item.category.toLowerCase().includes(query);
    });
}


function showEmptyQueryMessage() {
    const message = '<div class="no-results">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</div>';
    domElements.searchResults.innerHTML = message;
    domElements.searchStats.textContent = '';
}


function showLoadingIndicator() {
    domElements.loadingElement.style.display = 'block';
    domElements.searchResults.innerHTML = '';
}


function hideLoadingIndicator() {
    domElements.loadingElement.style.display = 'none';
}


function displaySearchResults(results, query) {
    if (results.length === 0) {
        showNoResultsMessage(query);
        return;
    }

    const statsText = `–ù–∞–π–¥–µ–Ω–æ ${results.length} ${formatResultsCount(results.length)} –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}"`;
    domElements.searchStats.textContent = statsText;
    domElements.searchStats.classList.add('animate__animated', 'animate__fadeIn');

    const html = generateResultsHtml(results, query);
    domElements.searchResults.innerHTML = html;
}


function generateResultsHtml(results, query) {
    return results.map((result, index) => {
        
        if (result.category === "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" && result.image) {
            return `
                <div class="result-item animate__animated animate__fadeInUp" style="animation-delay: ${index * 0.1}s">
                    <div class="result-image-container">
                        <img src="${result.image}" alt="${result.title}" class="result-image">
                    </div>
                    <a href="${result.url}" class="result-title">${highlightText(result.title, query)}</a>
                    <div class="result-snippet">${highlightText(result.snippet, query)}</div>
                    <div class="result-category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${result.category}</div>
                </div>
            `;
        } else {
            return `
                <div class="result-item animate__animated animate__fadeInUp" style="animation-delay: ${index * 0.1}s">
                    <a href="${result.url}" class="result-title">${highlightText(result.title, query)}</a>
                    <div class="result-url">${result.url}</div>
                    <div class="result-snippet">${highlightText(result.snippet, query)}</div>
                    <div class="result-category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${result.category}</div>
                </div>
            `;
        }
    }).join('');
}


function showNoResultsMessage(query) {
    const message = `
        <div class="no-results animate__animated animate__fadeIn">
            –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.
        </div>
    `;
    domElements.searchResults.innerHTML = message;
}


function formatResultsCount(count) {
    if (count % 10 === 1 && count % 100 !== 11) {
        return '—Ä–µ–∑—É–ª—å—Ç–∞—Ç';
    } else if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) {
        return '—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞';
    }
    return '—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤';
}


function highlightText(text, query) {
    if (!query) return text;
    
    const regex = new RegExp(`(${query})`, 'gi');
    return text.replace(regex, '<span class="highlight">$1</span>');
}


function showSuggestions() {
    const query = domElements.searchInput.value.toLowerCase().trim();
    
    if (query.length < 2) {
        domElements.suggestionsElement.style.display = 'none';
        return;
    }
    
    const filtered = config.popularQueries.filter(q => q.toLowerCase().includes(query));
    
    if (filtered.length === 0) {
        domElements.suggestionsElement.style.display = 'none';
        return;
    }
    
    domElements.suggestionsElement.innerHTML = filtered.map(item => 
        `<div class="suggestion-item">${item}</div>`
    ).join('');
    domElements.suggestionsElement.style.display = 'block';
}


function setTheme(theme) {
    document.body.className = theme === 'dark' ? 'dark-theme' : '';
    currentTheme = theme;
    
    domElements.themeButtons.forEach(btn => {
        btn.classList.remove('active');
        if (btn.dataset.theme === theme) {
            btn.classList.add('active');
        }
    });
    
    localStorage.setItem('searchTheme', theme);
}


function showError(message) {
    const errorHtml = `<div class="no-results error">${message}</div>`;
    domElements.searchResults.innerHTML = errorHtml;
}


function initChatbot() {
    
    document.getElementById('chatbot-toggle').addEventListener('click', toggleChatbot);
    document.getElementById('chatbot-close').addEventListener('click', toggleChatbot);
    document.getElementById('chatbot-send').addEventListener('click', sendMessage);
    document.getElementById('chatbot-user-input').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') sendMessage();
    });
    
    
    setTimeout(() => {
        addBotMessage("–ü—Ä–∏–≤–µ—Ç! –Ø –ê–ª—ë–Ω—É—à–∫–∞, –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å–∏—Å—Ç–µ–º–µ –ê–ª—ë–Ω–∫–∞_Turbo. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?");
        showOptions(faqOptions);
    }, 1500);
}


function toggleChatbot() {
    const chatbot = document.getElementById('chatbot-container');
    chatbot.classList.toggle('active');
    
    if (chatbot.classList.contains('active')) {
        document.getElementById('chatbot-user-input').focus();
    }
}


function addUserMessage(text) {
    const messages = document.getElementById('chatbot-messages');
    const message = document.createElement('div');
    message.className = 'message user-message';
    message.textContent = text;
    messages.appendChild(message);
    messages.scrollTop = messages.scrollHeight;
}


function addBotMessage(text) {
    const messages = document.getElementById('chatbot-messages');
    const message = document.createElement('div');
    message.className = 'message bot-message';
    
    
    message.innerHTML = text.replace(/\n/g, '<br>');
    
    messages.appendChild(message);
    messages.scrollTop = messages.scrollHeight;
}


function showTypingIndicator() {
    const messages = document.getElementById('chatbot-messages');
    const indicator = document.createElement('div');
    indicator.className = 'typing-indicator';
    indicator.innerHTML = '<span></span><span></span><span></span>';
    messages.appendChild(indicator);
    messages.scrollTop = messages.scrollHeight;
    return indicator;
}


function hideTypingIndicator(indicator) {
    if (indicator && indicator.parentNode) {
        indicator.parentNode.removeChild(indicator);
    }
}


function showOptions(options) {
    const messages = document.getElementById('chatbot-messages');
    const optionsContainer = document.createElement('div');
    optionsContainer.className = 'chatbot-options';
    
    options.forEach(option => {
        const optionElement = document.createElement('div');
        optionElement.className = 'chatbot-option';
        optionElement.textContent = option;
        optionElement.addEventListener('click', () => {
            addUserMessage(option);
            processUserInput(option);
        });
        optionsContainer.appendChild(optionElement);
    });
    
    messages.appendChild(optionsContainer);
    messages.scrollTop = messages.scrollHeight;
}


function sendMessage() {
    const input = document.getElementById('chatbot-user-input');
    const message = input.value.trim();
    
    if (message) {
        addUserMessage(message);
        input.value = '';
        processUserInput(message);
    }
}


function processUserInput(input) {
    const lowerInput = input.toLowerCase();
    let response = "";
    const typingIndicator = showTypingIndicator();
    
    setTimeout(() => {
        hideTypingIndicator(typingIndicator);
        
        
        for (const [key, value] of Object.entries(chatbotKnowledge)) {
            if (lowerInput.includes(key)) {
                response = value;
                break;
            }
        }
        
        
        if (!response) {
            if (lowerInput.includes("–ø–æ–∏—Å–∫") || lowerInput.includes("–Ω–∞–π—Ç–∏")) {
                response = "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –ø–æ–∏—Å–∫–æ–º. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –≤–≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n- JavaScript\n- –ú–æ—Å–∫–≤–∞\n- –†–µ—Ü–µ–ø—Ç—ã –±–ª–∏–Ω–æ–≤\n\n–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è –≤—ã–ø–æ–ª–Ω–∏–ª–∞ –ø–æ–∏—Å–∫ –∑–∞ –≤–∞—Å?";
            } else if (lowerInput.includes("—Ç–µ–º–∞") || lowerInput.includes("–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ")) {
                response = "–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É —Å–∞–π—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É. –î–æ—Å—Ç—É–ø–Ω—ã:\n\n- –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞\n- –¢—ë–º–Ω–∞—è —Ç–µ–º–∞\n\n–ö–∞–∫—É—é —Ç–µ–º—É –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?";
            } else {
                response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:";
                addBotMessage(response);
                showOptions(faqOptions);
                return;
            }
        }
        
        addBotMessage(response);
        
        
        if (response.includes("–æ–ø–µ—Ä–∞—Ç–æ—Ä")) {
            setTimeout(() => {
                addBotMessage("–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –Ω–∞ alyonushka-store@yandex.ru –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É +7 (923) 174-27-02.");
            }, 2000);
        }
    }, 1000 + Math.random() * 1000);
}


document.addEventListener('DOMContentLoaded', initApp);